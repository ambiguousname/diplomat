// generated by diplomat-tool

import { AttrEnum } from "./AttrEnum.mjs"
import { AttrOpaque1 } from "./AttrOpaque1.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";




const Unnamespaced_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.namespace_Unnamespaced_destroy(ptr);
});

export class Unnamespaced {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        Unnamespaced_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }

    // Size of our opaque type in bytes for diplomat_alloc.
    // See https://doc.rust-lang.org/reference/type-layout.html for further reference.
    static get _size() {
        return 4;
    }
    
    // Alignment of our opaque type in bytes for diplomat_alloc.
    // See https://doc.rust-lang.org/reference/type-layout.html for further reference.
    static get _align() {
        return 4;
    }


    static make(e) {
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(Unnamespaced._size, Unnamespaced._align);
        const result = wasm.namespace_Unnamespaced_make(diplomat_recieve_buffer, e.ffiValue);
    
        const finalOut = new Unnamespaced(diplomat_recieve_buffer, []);
        
        
        wasm.diplomat_free(diplomat_recieve_buffer, Unnamespaced._size, Unnamespaced._align);
        
    
        return finalOut;
    }

    useNamespaced(n) {
        wasm.namespace_Unnamespaced_use_namespaced(this.ffiValue, n.ffiValue);
    
        
        
    
    }

    

}