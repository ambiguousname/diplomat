// generated by diplomat-tool

import { Bar } from "./Bar.mjs"
import { BorrowedFields } from "./BorrowedFields.mjs"
import { BorrowedFieldsReturning } from "./BorrowedFieldsReturning.mjs"
import { BorrowedFieldsWithBounds } from "./BorrowedFieldsWithBounds.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";




const Foo_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.Foo_destroy(ptr);
});

export class Foo {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    #aEdge = [];
    
    
    constructor(ptr, selfEdge, aEdge) {
        
        
        this.#aEdge = aEdge;
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        Foo_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }

    // Size of our opaque type in bytes for diplomat_alloc.
    // See https://doc.rust-lang.org/reference/type-layout.html for further reference.
    static get _size() {
        return 4;
    }
    
    // Alignment of our opaque type in bytes for diplomat_alloc.
    // See https://doc.rust-lang.org/reference/type-layout.html for further reference.
    static get _align() {
        return 4;
    }


    static new_(x) {
        
        const xSlice = diplomatRuntime.DiplomatBuf.str8(wasm, x);
        const xArena = new diplomatRuntime.DiplomatFinalizedArena();
        
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(Foo._size, Foo._align);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [xSlice];
        const result = wasm.Foo_new(diplomat_recieve_buffer, xSlice.ptr, xSlice.size);
    
        const finalOut = new Foo(diplomat_recieve_buffer, [], aEdges);
        
        
        xSlice.garbageCollect();
        
        wasm.diplomat_free(diplomat_recieve_buffer, Foo._size, Foo._align);
        
    
        return finalOut;
    }

    get bar() {
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(Bar._size, Bar._align);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        
        // This lifetime edge depends on lifetimes 'a, 'b
        let bEdges = [this];
        const result = wasm.Foo_get_bar(diplomat_recieve_buffer, this.ffiValue);
    
        const finalOut = new Bar(diplomat_recieve_buffer, [], bEdges, aEdges);
        
        
        wasm.diplomat_free(diplomat_recieve_buffer, Bar._size, Bar._align);
        
    
        return finalOut;
    }

    static newStatic(x) {
        
        const xSlice = diplomatRuntime.DiplomatBuf.str8(wasm, x);
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(Foo._size, Foo._align);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [];
        const result = wasm.Foo_new_static(diplomat_recieve_buffer, xSlice.ptr, xSlice.size);
    
        const finalOut = new Foo(diplomat_recieve_buffer, [], aEdges);
        
        
        xSlice.free();
        
        wasm.diplomat_free(diplomat_recieve_buffer, Foo._size, Foo._align);
        
    
        return finalOut;
    }

    asReturning() {
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(BorrowedFieldsReturning._size, BorrowedFieldsReturning._align);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        const result = wasm.Foo_as_returning(diplomat_recieve_buffer, this.ffiValue);
    
        const finalOut = new BorrowedFieldsReturning(diplomat_recieve_buffer, aEdges);
        
        
        wasm.diplomat_free(diplomat_recieve_buffer, BorrowedFieldsReturning._size, BorrowedFieldsReturning._align);
        
    
        return finalOut;
    }

    static extractFromFields(fields) {
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(Foo._size, Foo._align);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [...fields._fieldsForLifetimeA];
        const result = wasm.Foo_extract_from_fields(diplomat_recieve_buffer, ...fields._intoFfi(temp, [aEdges]));
    
        const finalOut = new Foo(diplomat_recieve_buffer, [], aEdges);
        
        
        this.free(); /* TODO: Does this work? */
        
        wasm.diplomat_free(diplomat_recieve_buffer, Foo._size, Foo._align);
        
    
        return finalOut;
    }

    static extractFromBounds(bounds, anotherString) {
        
        const anotherStringSlice = diplomatRuntime.DiplomatBuf.str8(wasm, anotherString);
        const anotherStringArena = new diplomatRuntime.DiplomatFinalizedArena();
        
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(Foo._size, Foo._align);
        
        // This lifetime edge depends on lifetimes 'a, 'y, 'z
        let aEdges = [...bounds._fieldsForLifetimeB, ...bounds._fieldsForLifetimeC, anotherStringSlice];
        const result = wasm.Foo_extract_from_bounds(diplomat_recieve_buffer, ...bounds._intoFfi(temp, [aEdges], [aEdges]), anotherStringSlice.ptr, anotherStringSlice.size);
    
        const finalOut = new Foo(diplomat_recieve_buffer, [], aEdges);
        
        
        this.free(); /* TODO: Does this work? */
        
        anotherStringSlice.garbageCollect();
        
        wasm.diplomat_free(diplomat_recieve_buffer, Foo._size, Foo._align);
        
    
        return finalOut;
    }

    

}