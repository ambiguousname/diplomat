// generated by diplomat-tool

import { MyIterator } from "./MyIterator.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";




const MyIterable_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.namespace_MyIterable_destroy(ptr);
});

export class MyIterable {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    _fromFFI(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        MyIterable_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    constructor(x) {
        
        const xSlice = diplomatRuntime.DiplomatBuf.slice(wasm, x, "u8");
        const result = wasm.namespace_MyIterable_new(xSlice.ptr, xSlice.size);
    
        try {
    
            return MyIterable._fromFFI(result, []);
        } finally {
        
            xSlice.free();
        
        }
    }

    [Symbol.iterator]() {
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        const result = wasm.namespace_MyIterable_iter(this.ffiValue);
    
        try {
    
            return MyIterator._fromFFI(result, [], aEdges);
        } finally {
        
        }
    }

    

}