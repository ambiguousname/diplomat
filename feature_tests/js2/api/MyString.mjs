// generated by diplomat-tool

import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";




const MyString_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.MyString_destroy(ptr);
});

export class MyString {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        MyString_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static new_(v) {
        
        const vSlice = diplomatRuntime.DiplomatBuf.str8(wasm, v);
        const result = wasm.MyString_new(vSlice.ptr, vSlice.size);
    
        const finalOut = new MyString(result, []);
        
        
        vSlice.free();
        
    
        return finalOut;
    }

    static newUnsafe(v) {
        
        const vSlice = diplomatRuntime.DiplomatBuf.str8(wasm, v);
        const result = wasm.MyString_new_unsafe(vSlice.ptr, vSlice.size);
    
        const finalOut = new MyString(result, []);
        
        
        vSlice.free();
        
    
        return finalOut;
    }

    static newOwned(v) {
        
        const vSlice = diplomatRuntime.DiplomatBuf.str8(wasm, v);
        const result = wasm.MyString_new_owned(vSlice.ptr, vSlice.size);
    
        const finalOut = new MyString(result, []);
        
        
    
        return finalOut;
    }

    static newFromFirst(v) {
        
        const vSlice = diplomatRuntime.DiplomatBuf.str8(wasm, v);
        const result = wasm.MyString_new_from_first(vSlice.ptr, vSlice.size);
    
        const finalOut = new MyString(result, []);
        
        
        vSlice.free();
        
    
        return finalOut;
    }

    set str(newStr) {
        
        const newStrSlice = diplomatRuntime.DiplomatBuf.str8(wasm, newStr);
        wasm.MyString_set_str(this.ffiValue, newStrSlice.ptr, newStrSlice.size);
    
        
        
        newStrSlice.free();
        
    
    }

    get str() {
        wasm.MyString_get_str(this.ffiValue);
    
        return writeable;
        
        
    
        return finalOut;
    }

    getBoxedStr() {
        
        const diplomat_recieve_buffer = wasm.diplomat_alloc(8, 4);
        const result = wasm.MyString_get_boxed_str(diplomat_recieve_buffer, this.ffiValue);
    
        const finalOut = diplomat_recieve_buffer // TODO: Slice c_to_js;
        
        
        wasm.diplomat_free(diplomat_recieve_buffer, 8, 4);
        
    
        return finalOut;
    }

    

}