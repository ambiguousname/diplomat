// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs"
import * as diplomatRuntime from "./diplomat-runtime.mjs"


const MyString_box_destroy_registry = new FinalizationRegistry((ptr) => {
	wasm.MyString_destroy(ptr);
});
export class MyString {
	// Internal ptr reference:
	#ptr = null;

	// Lifetimes are only to keep dependencies alive.
	#selfEdge = [];
	
	
	constructor(ptr, selfEdge) {
		
		this.#ptr = ptr;
		this.#selfEdge = selfEdge;
		if (this.#selfEdge.length === 0) {
			// TODO: Do we need owned? Should double check with Dart opaque types.
			MyString_box_destroy_registry.register(this, this.#ptr);
		}
	}

	static new(v) {
        const result = wasm.MyString_new();
        return new MyString(result, []);
    }

	static newUnsafe(v) {
        const result = wasm.MyString_new_unsafe();
        return new MyString(result, []);
    }

	static newOwned(v) {
        const result = wasm.MyString_new_owned();
        return new MyString(result, []);
    }

	static newFromFirst(v) {
        const result = wasm.MyString_new_from_first();
        return new MyString(result, []);
    }

	setStr(newStr) {
        wasm.MyString_set_str();
        
    }

	getStr() {
        wasm.MyString_get_str();
        return writeable;
    }

	getBoxedStr() {
        const result = wasm.MyString_get_boxed_str();
        return result // TODO;
    }

}