// generated by diplomat-tool
import type { Foo } from "./Foo"
import type { pointer, codepoint } from "./diplomat-runtime.d.ts";

export class BorrowedFieldsWithBounds {

    get fieldA() : string;
    set fieldA(value: string); 

    get fieldB() : string;
    set fieldB(value: string); 

    get fieldC() : string;
    set fieldC(value: string); 
    constructor(fieldA,fieldB,fieldC) {
        if (arguments.length > 0 && arguments[0] === diplomatRuntime.internalConstructor) {
            this.#fromFFI(arguments.slice(1));
        } else {
            
            this.#fieldA = fieldA;
            
            this.#fieldB = fieldB;
            
            this.#fieldC = fieldC;
            
        }}
    


    static fromFooAndStrings(foo: Foo, dstr16X: string, utf8StrZ: string): BorrowedFieldsWithBounds;
}