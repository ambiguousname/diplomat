inline {##}
{%- for qualifier in m.pre_qualifiers %}{{qualifier}} {% endfor -%}
{{ m.return_ty }} {##}
{{- m.method_name -}}
(
	{%- for param in m.param_decls %}
		{%- if !loop.first %}, {% endif -%}
		{{ param.type_name }} {{ param.var_name }}
	{%- endfor -%}
)
{%- for qualifier in m.post_qualifiers %} {{qualifier}}{% endfor %};

{#- Merge this with the match block below when we get '|' support in when blocks -#}
{%- if auto_define_self_arithmetic -%}
{%- if let Some(op_str) = m.method_name.strip_prefix("operator") -%}
{%- if ["+", "-", "*", "/"].contains(op_str) -%}
{%- let param_var = m.param_decls[0] ~%}
{##}  inline {{ m.return_ty }}& {{m.method_name -}}=({{ param_var.type_name }} {{ param_var.var_name }});
{%- endif -%}
{%- endif -%}
{%- endif -%}

{#- Extra method definitions for special types -#}
{%- match m.method.attrs.special_method -%}
{%- when Some(hir::SpecialMethod::Iterable) -%}
{%- let helper_type = m.return_ty.replace("std::unique_ptr", "diplomat::next_to_iter_helper") %}
  inline {{helper_type}} begin() const;
  inline std::nullopt_t end() const { return std::nullopt; }
{%- else -%}
{%- endmatch -%}
